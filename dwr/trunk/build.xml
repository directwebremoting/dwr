<?xml version="1.0"?>
<project name="dwr" default="standard">

  <!-- For terminology, see the readme.txt file alongside this build file -->

  <!--=======================================================================-->
  <!-- File that contains local settings, you may need to edit this -->
  <property file="build.properties"/>

  <!-- Version numbers: Duplicates the logic in VersionUtil.loadProperties() -->
  <property file="${source.root}/core/impl/main/java/dwr-version.properties"/>
  <condition property="label" value="${major}.${minor}.${revision}">
    <equals arg1="${title}" arg2=""/>
  </condition>
  <condition property="label" value="${major}.${minor}.${revision}.${build}.${title}">
    <not>
      <equals arg1="${title}" arg2=""/>
    </not>
  </condition>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <fileset dir="${source.root}/etc/ant" includes="**/*"/>
    </classpath>
  </taskdef>

  <!--=======================================================================-->
  <target name="prepare" description="Various bits of setup">
    <tstamp/>
  </target>

  <!--=======================================================================-->
  <target name="war" depends="prepare" description="Create output WAR files">
    <property name="modules" value="
      core/api, core/spi, core/convert, core/impl, core/legacy, core/util,
      protocol/dwrp, protocol/json, protocol/bayeux,
      serverside/spring, serverside/guice, serverside/struts, serverside/hibernate, serverside/various,
      ui/dwr, ui/gi, ui/scriptaculous,
      noncla/various
      "/>
    <build target="${target.root}" modules="${modules}"/>
    <jar destfile="${target.root}/dwr.jar" compress="true">
      <fileset dir="${target.root}/classes/main"/>
    </jar>
    <copy todir="${target.root}/web/demo/WEB-INF/classes">
      <fileset dir="${target.root}/classes/demo"/>
    </copy>
    <copy todir="${target.root}/web/demo/WEB-INF/lib">
      <fileset file="${target.root}/dwr.jar"/>
    </copy>
    <copy todir="${target.root}/web/test/WEB-INF/classes">
      <fileset dir="${target.root}/classes/test"/>
    </copy>
    <copy todir="${target.root}/web/test/WEB-INF/lib">
      <fileset file="${target.root}/dwr.jar"/>
    </copy>
  </target>

  <!--=======================================================================-->
  <target name="standard" depends="war" description="Create output WAR and JAR files">
    <taskdef name="retroweaver" classname="net.sourceforge.retroweaver.ant.RetroWeaverTask">
      <classpath>
        <fileset dir="${source.root}/etc/retroweaver" includes="**/*"/>
      </classpath>
    </taskdef>
    <retroweaver inputjar="${target.root}/dwr.jar" outputjar="${target.root}/dwr-jdk14.jar" target="1.4"/>
    <zip destfile="${target.root}/dwr.war" basedir="${target.root}/web/demo"/>
    <zip destfile="${target.root}/dwr-test.war" basedir="${target.root}/web/test"/>
    <antcall target="source"/>
  </target>

  <!--=======================================================================-->
  <target name="jaxer" depends="prepare" description="Create Jaxer output files">
    <property name="modules" value="
      core/api, core/spi, core/convert, core/impl, core/legacy, core/util,
      protocol/dwrp, ui/jaxer
      "/>
    <build target="${target.root}" modules="${modules}"/>
    <jar destfile="${target.root}/jaxer/jaxer-dwr.jar" compress="true">
      <fileset dir="${target.root}/jaxer/classes/main"/>
    </jar>
    <copy todir="${target.root}/jaxer/web/demo/WEB-INF/classes">
      <fileset dir="${target.root}/jaxer/classes/demo"/>
    </copy>
    <copy todir="${target.root}/jaxer/web/demo/WEB-INF/lib">
      <fileset file="${target.root}/jaxer/jaxer-dwr.jar"/>
    </copy>
    <copy file="${source.root}/ui/jaxer/web/WEB-INF/web.xml" todir="${target.root}/jaxer/"/>
    <copy file="${source.root}/ui/jaxer/readme.txt" todir="${target.root}/jaxer/"/>
    <zip destfile="${target.root}/jaxer/demoServer.war" basedir="${target.root}/jaxer/web/demo"/>
    <zip destfile="${target.root}/jaxer/demoRemoting.zip" basedir="${source.root}/ui/jaxer/demo/demoRemoting"/>
  </target>

  <!--=======================================================================-->
  <macrodef name="build" description="Create some distribution files from a set of modules">
    <attribute name="modules" description="The set module to compile"/>
    <attribute name="target" description="The directory into which to build"/>
    <sequential>
      <mkdir dir="@{target}/jar"/>
      <mkdir dir="@{target}/classes/main"/>
      <mkdir dir="@{target}/classes/test"/>
      <mkdir dir="@{target}/classes/demo"/>
      <mkdir dir="@{target}/web/demo/WEB-INF/classes"/>
      <mkdir dir="@{target}/web/demo/WEB-INF/lib"/>
      <mkdir dir="@{target}/web/test/WEB-INF/classes"/>
      <mkdir dir="@{target}/web/test/WEB-INF/lib"/>
      <foreach list="@{modules}" param="module" trim="true" target="process-module">
        <param name="target" value="@{target}"/>
      </foreach>
    </sequential>
  </macrodef>

  <!--=======================================================================-->
  <target name="process-module">
    <echo message="Processing module: ${module}"/>
    <!-- copy jar files to the jar pool, to help suss the classpath -->
    <if>
      <available file="${source.root}/${module}/jar"/>
      <then>
        <copy todir="${target}/jar" verbose="true">
          <fileset dir="${module}/jar">
            <include name="**/*.jar"/>
          </fileset>
        </copy>
      </then>
    </if>
    <!-- The main tree -->
    <if>
      <available file="${source.root}/${module}/main/java"/>
      <then>
        <if>
          <available file="${source.root}/${module}/generated/java"/>
          <then>
            <compile-tree module="${module}" tree="main" target="${target}">
              <sources>
                <src path="${source.root}/${module}/main/java"/>
                <src path="${source.root}/${module}/generated/java"/>
              </sources>
            </compile-tree>
            <compile-copy module="${module}" tree="main" target="${target}"/>
          </then>
          <else>
            <compile-tree module="${module}" tree="main" target="${target}">
              <sources>
                <src path="${source.root}/${module}/main/java"/>
              </sources>
            </compile-tree>
            <compile-copy module="${module}" tree="main" target="${target}"/>
          </else>
        </if>
      </then>
    </if>
    <!-- The test tree -->
    <if>
      <available file="${source.root}/${module}/test/java"/>
      <then>
        <compile-tree module="${module}" tree="test" target="${target}">
          <sources>
            <src path="${source.root}/${module}/test/java"/>
          </sources>
        </compile-tree>
        <compile-copy module="${module}" tree="test" target="${target}"/>
      </then>
    </if>
    <!-- The test web tree -->
    <if>
      <available file="${source.root}/${module}/test/web"/>
      <then>
        <copy todir="${target}/web/test">
          <fileset dir="${source.root}/${module}/test/web"/>
        </copy>
      </then>
    </if>
    <!-- The demo tree -->
    <if>
      <available file="${source.root}/${module}/demo/java"/>
      <then>
        <compile-tree module="${module}" tree="demo" target="${target}">
          <sources>
            <src path="${source.root}/${module}/demo/java"/>
          </sources>
        </compile-tree>
        <compile-copy module="${module}" tree="demo" target="${target}"/>
      </then>
    </if>
    <!-- The demo web tree -->
    <if>
      <available file="${source.root}/${module}/demo/web"/>
      <then>
        <copy todir="${target}/web/demo">
          <fileset dir="${source.root}/${module}/demo/web"/>
        </copy>
      </then>
    </if>
  </target>

  <!--=======================================================================-->
  <macrodef name="compile-tree" description="Compile the sources from a set of trees">
    <attribute name="module" description="The module to compile"/>
    <attribute name="tree" description="Must be one of [main|test|demo]"/>
    <attribute name="target" description="The base directory for this build"/>
    <element name="sources"/>
    <sequential>
      <!-- compile the sources in @{module}/@{tree}/java into ${target}/classes/@{tree} -->
      <javac debug="on" includes="**/*.java" destdir="${target}/classes/@{tree}">
        <exclude name="**/package.html"/>
        <exclude name="**/package-info.java"/>
        <sources/>
        <classpath>
          <fileset dir="${target}/jar" includes="**/*.jar"/>
          <pathelement location="${target}/classes/main"/>
        </classpath>
      </javac>
    </sequential>
  </macrodef>

  <!--=======================================================================-->
  <macrodef name="compile-copy" description="Compile the sources from a set of trees">
    <attribute name="module" description="The module to compile"/>
    <attribute name="tree" description="Must be one of [main|test|demo]"/>
    <attribute name="target" description="The base directory for this build"/>
    <sequential>
      <!-- copy the resources in @{module}/@{tree}/java into ${target}/classes/@{tree} -->
      <copy todir="${target}/classes/@{tree}">
        <fileset dir="${source.root}/@{module}/@{tree}/java">
          <exclude name="**/*.java"/>
          <exclude name="**/package.html"/>
          <exclude name="**/package-info.java"/>
        </fileset>
      </copy>
    </sequential>
  </macrodef>

  <!--=======================================================================-->
  <target name="source">
    <mkdir dir="${target.root}/javadoc"/>
    <javadoc access="public"
        author="true"
        destdir="${target.root}/javadoc"
        doctitle="DWR Version ${label}"
        use="true"
        splitindex="true"
        version="true">
      <sourcepath path="${source.root}/core/api/main/java"/>
      <classpath>
        <pathelement location="${target.root}/classes/main"/>
        <fileset dir="${target.root}/jar" includes="**/*.jar"/>
      </classpath>
      <package name="org.directwebremoting.*"/>
      <footer>Copyright &#168; 2008</footer>
    </javadoc>
    <path id="dtddocpath">
      <fileset dir="${source.root}/etc/dtddoc" includes="**/*.jar"/>
    </path>
    <taskdef name="DTDDoc" classname="DTDDoc.DTDDocTask" classpathref="dtddocpath"/>
    <mkdir dir="${target.root}/dtddoc"/>
    <DTDDoc showHiddenTags="false"
        showFixmeTags="false"
        sourceDir="${source.root}/core/impl/main/java"
        destDir="${target.root}/dtddoc"
        docTitle = "DTDDoc's example">
      <include name="**/*.dtd"/>
      <exclude name="common/*.dtd"/>
    </DTDDoc>
    <zip destfile="${target.root}/dwr-${label}-src.zip">
      <fileset dir="${source.root}">
        <exclude name="target/**"/>
        <exclude name="**/*.iml"/>
        <exclude name="**/*.ipr"/>
        <exclude name="**/*.iws"/>
      </fileset>
      <fileset dir="${target.root}">
        <include name="dwr.jar"/>
        <include name="dwr.war"/>
      </fileset>
      <!-- The DWR website extracts javadoc from here -->
      <zipfileset dir="${target.root}/javadoc" prefix="javadoc"/>
    </zip>
  </target>

  <!--=======================================================================-->
  <target name="tomcat-reload" depends="war" description="Asks tomcat to re-load a DWR context">
    <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
      <classpath>
        <pathelement path="${tomcat.home}/lib/catalina-ant.jar"/>
      </classpath>
    </taskdef>
    <reload url="${tomcat.manager.url}" username="${tomcat.username}" password="${tomcat.password}" path="${tomcat.context}"/>
  </target>

  <!--=======================================================================-->
  <target name="clean">
    <delete dir="${target.root}"/>
    <delete defaultexcludes="false" verbose="true" dir="${source.root}">
      <include name="**/*.DS_Store"/>
    </delete>
  </target>

</project>
