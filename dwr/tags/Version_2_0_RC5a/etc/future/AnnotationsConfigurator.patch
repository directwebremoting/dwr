### Eclipse Workspace Patch 1.0
#P dwr
Index: java5/org/directwebremoting/annotations/AnnotationsConfigurator.java
===================================================================
RCS file: /cvs/dwr/java5/org/directwebremoting/annotations/AnnotationsConfigurator.java,v
retrieving revision 1.9
diff -u -r1.9 AnnotationsConfigurator.java
--- java5/org/directwebremoting/annotations/AnnotationsConfigurator.java	6 Feb 2007 18:00:38 -0000	1.9
+++ java5/org/directwebremoting/annotations/AnnotationsConfigurator.java	6 Feb 2007 18:01:49 -0000
@@ -59,13 +59,11 @@
         if (data instanceof String)
         {
             String classesStr = (String) data;
-            String[] classNames = classesStr.split(",");
-            for (int i = 0; i < classNames.length; i++)
+            for (String className : classesStr.split(","))
             {
-                String className = classNames[i].trim();
                 try
                 {
-                    Class<?> clazz = LocalUtil.classForName(className);
+                    Class<?> clazz = LocalUtil.classForName(className.trim());
                     processClass(clazz, container);
                 }
                 catch (Exception ex)
@@ -157,17 +155,16 @@
         }
 
         AccessControl accessControl = (AccessControl) container.getBean(AccessControl.class.getName());
-        Method[] methods = clazz.getMethods();
-        for (int i = 0; i < methods.length; i++)
+        for (Method method : clazz.getMethods())
         {
-            if (methods[i].getAnnotation(RemoteMethod.class) != null)
+            if (method.getAnnotation(RemoteMethod.class) != null)
             {
-                accessControl.addIncludeRule(name, methods[i].getName());
+                accessControl.addIncludeRule(name, method.getName());
 
-                Auth authAnn = methods[i].getAnnotation(Auth.class);
+                Auth authAnn = method.getAnnotation(Auth.class);
                 if (authAnn != null)
                 {
-                    accessControl.addRoleRestriction(name, methods[i].getName(), authAnn.role());
+                    accessControl.addRoleRestriction(name, method.getName(), authAnn.role());
                 }
             }
         }
@@ -175,15 +172,14 @@
         Filters filtersAnn = clazz.getAnnotation(Filters.class);
         if (filtersAnn != null)
         {
-            Filter[] fs = filtersAnn.value();
-            for (int i = 0; i < fs.length; i++)
+            for (Filter filter : filtersAnn.value())
             {
-                processFilter(fs[i], name, container);
+                processFilter(filter, name, container);
             }
         }
-        // process single filter for convenience
         else
         {
+            // process single filter for convenience
             Filter filterAnn = clazz.getAnnotation(Filter.class);
             if (filterAnn != null)
             {
@@ -242,12 +238,11 @@
                 }
             }
 
-            Method[] methods = clazz.getMethods();
-            for (int i = 0; i < methods.length; i++)
+            for (Method method : clazz.getMethods())
             {
-                if (methods[i].getAnnotation(RemoteProperty.class) != null)
+                if (method.getAnnotation(RemoteProperty.class) != null)
                 {
-                    String name = methods[i].getName();
+                    String name = method.getName();
                     if (name.startsWith(METHOD_PREFIX_GET) || name.startsWith(METHOD_PREFIX_IS))
                     {
                         if (name.startsWith(METHOD_PREFIX_GET))
@@ -263,6 +258,7 @@
                     }
                 }
             }
+
             if (properties.length() > 0)
             {
                 properties.deleteCharAt(0);
@@ -309,12 +305,12 @@
         Map<String, String> result = new HashMap<String, String>();
         if (params != null)
         {
-            for (int i = 0; i < params.length; i++)
+            for (Param param : params)
             {
-                Param p = params[i];
-                result.put(p.name(), p.value());
+                result.put(param.name(), param.value());
             }
         }
+
         return result;
     }
 
